# -*- coding: cp1252 -*-
import Tkinter as tk
from tkFileDialog   import *




TITLE_FONT = ("Helvetica", 18, "bold")
class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        # the container is where we'll stack a bunch of frames
        # on top of each other, then the one we want visible
        # will be raised above the others
        container = tk.Frame(self)

        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)


        self.frames = {}
        for F in (ChooseAlgoPage, EvoluParameterPage, SimulatedAnnealingPage, GridsearchPage):
            frame = F(container, self)
            self.frames[F] = frame
            # put all of the pages in the same location; 
            # the one on the top of the stacking order
            # will be the one that is visible.
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(ChooseAlgoPage)

    def show_frame(self, c):
        '''Show a frame for the given class'''
        frame = self.frames[c]
        frame.tkraise()







# First Page. Appears after starting the GUI. Set global settings and choose
# an algorithm to optimize the conductance.

    # choosen values of the parameters are saved in
    # DebugValue
    # ThreadsValue
    # fileLogValue
    # consolelogValue
    # logServerPortValue
    
    
class ChooseAlgoPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
 

        #For testing puposes only
        def debugActivated():
            print DebugValue.get()

        def threadsget():
            print ThreadsValue.get()
            
        def fileLogLevelget():
            print filelogValue.get()
        
        def consoleLogLevelget():
            print consolelogValue.get()

        #TODO: mit Config Parser Werte aus gew체schter Config Datei laden und in die weiter unten in den Kommentaren angegeben Variablen schreiben
        def loadConfigFile():
            name= askopenfilename() 
            print name
            

        label = tk.Label(self, text=" How do you want to optimize the conductance of the ion channels?", font=TITLE_FONT)
        label.pack(side="top", fill="x", pady=10)

        

        openButton= tk.Button(self, text='load config', command=loadConfigFile)
        openButton.pack()

        globalParaFrame = tk.LabelFrame(self, text="Set System Settings")
        globalParaFrame.pack(fill="both", expand="yes")

        debugLabel = tk.Label(globalParaFrame, text="Debug Modus einschalten?")
        DebugValue = tk.StringVar(value=0)
        debugCheckButton = tk.Checkbutton(globalParaFrame, variable = DebugValue, onvalue = 1, offvalue = 0,
                                          command=debugActivated)
        debugLabel.pack()
        debugCheckButton.pack()

        threadValue= tk.StringVar()
        threadValue.set("normal")
        ThreadLabel= tk.Label(globalParaFrame, text="Simultane Threads")
        ThreadsEntry = tk.Entry(globalParaFrame, textvariable= threadValue)
        ThreadLabel.pack()
        ThreadsEntry.pack()

               
        filelogValue = tk.StringVar(value=2)
        
        filelogLabel= tk.Label(globalParaFrame, text="Filtering level for the logging file")
        filelogLabel.pack()

        filelogFrame = tk.Frame(globalParaFrame)
        filelogFrame.pack()
        
        AnythingFile = tk.Radiobutton(filelogFrame, text="Anything", variable=filelogValue, value=1,
                          command=fileLogLevelget)
        AnythingFile.grid(row =0, column=0)
        INFOFile = tk.Radiobutton(filelogFrame, text="Infos", variable=filelogValue, value=2,
                          command=fileLogLevelget)
        INFOFile.grid(row =0, column=1)
        WARNINGFile = tk.Radiobutton(filelogFrame, text="Warnings", variable=filelogValue, value=3,
                          command=fileLogLevelget)
        WARNINGFile.grid(row =0, column=2)
        CRITICALFile = tk.Radiobutton(filelogFrame, text="Criticals", variable=filelogValue, value=4,
                          command=fileLogLevelget)
        CRITICALFile.grid(row =0, column=3)



        consolelogValue= tk.StringVar(value=2)
        
        consolelogLabel= tk.Label(globalParaFrame, text="Filtering level for the console")
        consolelogLabel.pack()
        
        consolelogFrame= tk.Frame(globalParaFrame)
        consolelogFrame.pack()

        AnythingConsole = tk.Radiobutton(consolelogFrame, text="Anything", variable=consolelogValue, value=1,
                          command=consoleLogLevelget)
        AnythingConsole.grid(row =0, column=0)
        INFOConsole = tk.Radiobutton(consolelogFrame, text="Infos", variable=consolelogValue, value=2,
                          command=consoleLogLevelget)
        INFOConsole.grid(row =0, column=1)
        WARNINGConsole = tk.Radiobutton(consolelogFrame, text="Warnings", variable=consolelogValue, value=3,
                          command=consoleLogLevelget)
        WARNINGConsole.grid(row =0, column=2)
        CRITICALConsole = tk.Radiobutton(consolelogFrame, text="Criticals", variable=consolelogValue, value=4,
                          command=consoleLogLevelget)
        CRITICALConsole.grid(row =0, column=3)
        

        log_server_portValue= tk.StringVar(value=0)
        log_server_portLabel= tk.Label(globalParaFrame, text= "Log Server Port (With port 0 a free port is automatically chosen by the os)")
        log_server_portEntry= tk.Entry(globalParaFrame)

        

        
        
        
        chooseAlgoFrame = tk.LabelFrame(self, text="Choose Algorithm")
        chooseAlgoFrame.pack(fill="both", expand="yes")

        button1 = tk.Button(chooseAlgoFrame, text="Evolution채rer Algorithmus", 
                            command=lambda: controller.show_frame(EvoluParameterPage))
        button2 = tk.Button(chooseAlgoFrame, text="Simulated Annealing",
                            command=lambda: controller.show_frame(SimulatedAnnealingPage))

        button3 = tk.Button(chooseAlgoFrame, text="Gridsearch",
                            command=lambda: controller.show_frame(GridsearchPage))
        
        button1.pack(pady=10)
        button2.pack(pady=10)
        button3.pack(pady=10)

        



# Page to set the parameter for the genetic algorithm and start the program

    # choosen values of the parameters are saved in
    #
    # modeVar
    # PopSizeValue
    # MaxGenerationValue
    # thrFourierValue
    # penFourierValue
    # penalty_ai_RSValue
    # penalty_ai_FSValue
    # penalty_ibf_IBValue
    # penalty_ibf_CHValue
    # penalty_ir_IBValue
    # penalty_ir_CHValue
    # num_selectedValue
    # num_co_pointValue
    # mutation_strengthValue
    # num_elitesValue
    # tournament_sizeValue
    # crossover_rateValue
    # apwValue
    # ibfValue
    # irValue
    # aiValue
    # slopeValue


class EvoluParameterPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        
        label = tk.Label(self, text="Parametereinstellung f체r den Evolution채rer Algorithmus", font=TITLE_FONT)
        label.pack(side="top", fill="x", pady=10)
        
        button = tk.Button(self, text="Go to the start page", 
                           command=lambda: controller.show_frame(ChooseAlgoPage))
        button.pack()


        def maxGenerationget():
            print penalty_ibf_IBValue

        def modeget():
               selection = "You selected the option " + str(modeVar.get())
               print selection
                
        modeVar = tk.StringVar(value=2)

        modeLabel= tk.Label(self, text="Which kind of neurons do you want to optimize?")
        modeLabel.pack()

        kindOfNeuronsFrame = tk.Frame(self)
        kindOfNeuronsFrame.pack()
        
        RS = tk.Radiobutton(kindOfNeuronsFrame, text="Regular Spiking", variable=modeVar, value=1,
                          command=modeget)
        RS.grid(row =0, column=0)
        FS = tk.Radiobutton(kindOfNeuronsFrame, text="Fast Spiking", variable=modeVar, value=2,
                          command=modeget)
        FS.grid(row =0, column=1)
        IB = tk.Radiobutton(kindOfNeuronsFrame, text="Intrinsic Bursting", variable=modeVar, value=3,
                          command=modeget)
        IB.grid(row =0, column=2)
        CH = tk.Radiobutton(kindOfNeuronsFrame, text="Chattering Bursting", variable=modeVar, value=4,
                          command=modeget)
        CH.grid(row =0, column=3)

        StimulationLabel= tk.Label(self, text="Stimulation")
        label.pack()

        PopSizeValue=  tk.StringVar(value=0)
        Pop_Size_Label = tk.Label(self, text="Population Size")
        Pop_Size_Label.pack()
        Pop_Size_Entry = tk.Entry(self, textvariable = PopSizeValue)
        Pop_Size_Entry.pack()
        

        MaxGenerationValue=  tk.StringVar(value=30)
        MaxGenerationLabel = tk.Label(self, text="Maximum Generations")
        MaxGenerationLabel.pack()
        MaxGenerationEntry= tk.Entry(self, textvariable = MaxGenerationValue)
        MaxGenerationEntry.pack()
        
        thrFourierValue = tk.StringVar(value=5)
        thrFourierLabel = tk.Label(self, text="Fourier")
        thrFourierLabel.pack()
        thrFourierEntry = tk.Entry(self, textvariable= thrFourierValue)
        thrFourierEntry.pack()

        
        penaltyFrame=tk.Frame(self)
        penaltyFrame.pack()

        penFourierLabel= tk.Label(penaltyFrame, text="Penalty Fourier")
        penalty_ai_RSLabel = tk.Label(penaltyFrame, text="Penalty Adaptionsindex for Regular Spiking neurons")
        penalty_ai_FSLabel = tk.Label(penaltyFrame, text="Penalty Adaptionsindex for Fast Spiking neurons")
        penalty_ibf_IBLabel =tk.Label(penaltyFrame, text="Panelty Intraburst Frequence for Intrinsic Bursting neurons")
        penalty_ibf_CHLabel = tk.Label(penaltyFrame, text="Penalty Intraburst Frequence rythmic Bursting neurons")
        penalty_ir_IBLabel = tk.Label(penaltyFrame, text=" Penalty inactivation rate for Intrinsic Bursting neurons")
        penalty_ir_CHLabel = tk.Label(penaltyFrame, text=" Penalty inactivation rate rhythmic Bursting neurons")

        

        penFourierValue= tk.StringVar(value=-10000)
        penalty_ai_RSValue= tk.StringVar(value=-3500)
        penalty_ai_FSValue= tk.StringVar(value=-3500)
        penalty_ibf_IBValue= tk.StringVar(value=-2500)
        penalty_ibf_CHValue= tk.StringVar(value=-3500)
        penalty_ir_IBValue= tk.StringVar(value=-3500)
        penalty_ir_CHValue= tk.StringVar(value=-2500)

        
        penFourierEntry= tk.Entry(penaltyFrame, textvariable=  penFourierValue)
        penalty_ai_RSEntry= tk.Entry(penaltyFrame, textvariable= penalty_ai_RSValue)
        penalty_ai_FSEntry= tk.Entry(penaltyFrame, textvariable= penalty_ai_FSValue)
        penalty_ibf_IBEntry= tk.Entry(penaltyFrame, textvariable= penalty_ibf_IBValue)
        penalty_ibf_CHEntry= tk.Entry(penaltyFrame, textvariable= penalty_ibf_CHValue)
        penalty_ir_IBEntry= tk.Entry(penaltyFrame, textvariable= penalty_ir_IBValue)
        penalty_ir_CHEntry= tk.Entry(penaltyFrame, textvariable= penalty_ir_CHValue)

        penFourierLabel.grid(row = 0, column = 0)
        penFourierEntry.grid(row = 1, column = 0)
        penalty_ai_RSLabel.grid(row = 0, column = 1)
        penalty_ai_RSEntry.grid(row = 1, column = 1)
        penalty_ai_FSLabel.grid(row = 2, column = 0)
        penalty_ai_FSEntry.grid(row = 3, column = 0 )
        penalty_ibf_IBLabel.grid(row = 2, column = 1)
        penalty_ibf_IBEntry.grid(row = 3, column = 1)
        penalty_ibf_CHLabel.grid(row = 4, column = 0)
        penalty_ibf_CHEntry.grid(row = 5, column = 0)
        penalty_ir_IBLabel.grid(row = 4, column = 1)
        penalty_ir_IBEntry.grid(row = 5, column = 1)
        penalty_ir_CHLabel.grid(row = 6, column = 0)
        penalty_ir_CHEntry.grid(row = 7, column = 0)



        ParaForAlgorithmFrame= tk.Frame(self)
        ParaForAlgorithmFrame.pack()

        num_selectedValue= tk.StringVar(value=50)
        num_selectedLabel= tk.Label(ParaForAlgorithmFrame, text="Numbers  of selected")
        num_selectedEntry= tk.Entry(ParaForAlgorithmFrame, textvariable= num_selectedValue)
        
        num_co_pointValue= tk.StringVar(value=1)
        num_co_pointLabel= tk.Label(ParaForAlgorithmFrame, text="Numbers  of crossover points")
        num_co_pointEntry= tk.Entry(ParaForAlgorithmFrame, textvariable= num_co_pointValue)

        mutation_strengthValue= tk.StringVar(value=15)
        mutation_strengthLabel= tk.Label(ParaForAlgorithmFrame, text="Mutation strength")
        mutation_strengthEntry= tk.Entry(ParaForAlgorithmFrame, textvariable= mutation_strengthValue)

        num_elitesValue= tk.StringVar(value=1)
        num_elitesLabel= tk.Label(ParaForAlgorithmFrame, text="Number of elites")
        num_elitesEntry= tk.Entry(ParaForAlgorithmFrame, textvariable= num_elitesValue)


        tournament_sizeValue= tk.StringVar(value=15)
        tournament_sizeLabel= tk.Label(ParaForAlgorithmFrame, text="Tournament size")
        tournament_sizeEntry=tk.Entry(ParaForAlgorithmFrame, textvariable= tournament_sizeValue)

        crossover_rateValue= tk.StringVar(value=1)
        crossover_rateLabel = tk.Label(ParaForAlgorithmFrame, text="Crossover rate")
        crossover_rateEntry = tk.Entry(ParaForAlgorithmFrame, textvariable= crossover_rateValue)

        num_selectedLabel.grid(row=0, column=0)
        num_selectedEntry.grid(row=1, column=0)
        num_co_pointLabel.grid(row=0, column=1)
        num_co_pointEntry.grid(row=1, column=1)
        mutation_strengthLabel.grid(row=0, column=2)
        mutation_strengthEntry.grid(row=1, column=2)
        num_elitesLabel.grid(row=2, column=0)
        num_elitesEntry.grid(row=3, column=0)
        tournament_sizeLabel.grid(row=2, column=1)
        tournament_sizeEntry.grid(row=3, column=1)
        crossover_rateLabel.grid(row=2, column=2)
        crossover_rateEntry.grid(row=3, column=2)

       

        weightFrame= tk.Frame(self)
        weightFrame.pack()
        
        apwLabel =tk.Label( weightFrame, text="weight of apw")
        ibfLabel= tk.Label( weightFrame, text="weight of ibf")
        irLabel= tk.Label( weightFrame, text="weight of ir")
        aiLabel= tk.Label( weightFrame,  text="weight of ai")
        slopeLabel= tk.Label( weightFrame, text="weight of slope")

        apwValue= tk.StringVar(value=1)
        ibfValue= tk.StringVar(value=1)
        irValue= tk.StringVar(value=1)
        aiValue= tk.StringVar(value=1)
        slopeValue= tk.StringVar(value=1)

        
        apwEntry = tk.Entry(weightFrame, textvariable=apwValue)
        ibfEntry = tk.Entry(weightFrame, textvariable=ibfValue)
        irEntry = tk.Entry(weightFrame, textvariable=irValue)
        aiEntry = tk.Entry(weightFrame, textvariable=aiValue)
        slopeEntry = tk.Entry(weightFrame, textvariable=slopeValue)

        apwLabel.grid(row=0, column=0)
        apwEntry.grid(row=1, column=0)
        ibfLabel.grid(row=0, column=1)
        ibfEntry.grid(row=1, column=1)
        irLabel.grid(row=0, column=2)
        irEntry.grid(row=1, column=2)
        aiLabel.grid(row=2, column=0)
        aiEntry.grid(row=3, column=0)
        slopeLabel.grid(row=2, column=1)
        slopeEntry.grid(row=3, column=1)
        
        
                                      
        
        
    
        #save value with this button and exec start_sim.py
        startSimulationButton = tk.Button(self, text="Start the Simulation"',command=startGeneticAlgorithm')
        startSimulationButton.pack(side= tk.BOTTOM)

        # def startGeneticAlgorithm():
             #TODO store the values from the GUI in a config File and exec start_sim.py
            





        

# Page to set the parameter for the simulated annealing algorithm and start the program

    # choosen values of the parameters are saved in
    #
    # stepmaxValue
    # start_temperatureValue
    # cooling_scheduleValue
    # If cooling_scheduleValue = 2 which means exponential
    #   then cooling_schedule_alphaValue has to read too
    

class SimulatedAnnealingPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Parametereinstellung f체r das Simulated Annealing", font=TITLE_FONT)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Go to the start page", 
                           command=lambda: controller.show_frame(ChooseAlgoPage))
        button.pack()

        stepmaxValue= tk.StringVar(value=100)
        stepmaxLabel= tk.Label(self, text= "Step Maximum")
        stepmaxEntry= tk.Entry(self, textvariable= stepmaxValue)
        stepmaxLabel.pack()
        stepmaxEntry.pack()

        start_temperatureValue= tk.StringVar(value=10000)
        start_temperatureLabel= tk.Label(self, text="Start Temperature")
        start_temperatureEntry= tk.Entry(self, textvariable= start_temperatureValue)
        start_temperatureLabel.pack()
        start_temperatureEntry.pack()


        coolingScheduleFrame= tk.Frame(self)
        coolingScheduleFrame.pack()

        cooling_scheduleLabel= tk.Label(coolingScheduleFrame, text="Cooling Schedule")
        cooling_scheduleValue =tk.StringVar(value=2)
        linear= tk.Radiobutton(coolingScheduleFrame, text="Linear", variable= cooling_scheduleValue, value= 1)
        exponential= tk.Radiobutton(coolingScheduleFrame, text="Exponential", variable = cooling_scheduleValue, value= 2)

        cooling_schedule_alphaValue= tk.StringVar(value=0.9)
        cooling_schedule_alphaLabel= tk.Label(coolingScheduleFrame, text="Parameter for exponential cooling schedule (Between 0 and 1).") 
        cooling_schedule_alphaEntry= tk.Entry(coolingScheduleFrame)


                
        #save value with this button and exec start_sim.py
        startSimulationButton = tk.Button(coolingScheduleFrame, text="Start the Simulation")
        startSimulationButton.pack(side= tk.BOTTOM)


        # def startSimulatedAnnealing():
            #TODO store the values from the GUI in a config File exec start_sim.py





        

#Page to set the parameter for the gridsearch algorithm and start the program
        
    # choosen values of the parameters are saved in
    # TODO


class GridsearchPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Parametereinstellung f체r den Gridsearch Algorithmus", font=TITLE_FONT)
        label.pack(side="top", fill="x", pady=10)
        
        button = tk.Button(self, text="Go to the start page", 
                           command=lambda: controller.show_frame(ChooseAlgoPage))
        button.pack()


        
        startSimulationButton = tk.Button(self, text="Start the Simulation")
        startSimulationButton.pack(side= tk.BOTTOM)


        

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
