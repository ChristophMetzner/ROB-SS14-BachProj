//  ******************************************************
// 
//     File generated by: neuroConstruct v1.6.0
// 
//  ******************************************************

{load_file("stdlib.hoc")}
{load_file("stdgui.hoc")}
{startsw()}

objectvar allCells
{allCells = new List()}

{nC = 1}

{load_file("nCtools.hoc")}
{load_file("cellCheck.hoc")}
objref strFuncs
{strFuncs = new StringFunctions()}
strdef host
{system("hostname", host)}
if (strFuncs.len(host)>0) {
    strFuncs.left(host, strFuncs.len(host)-1) 
} else {
    host = "????" 
}

{hostid = 0}

{use_mcell_ran4(1)}

{mcell_ran4_init(4321)}
{ load_file("L5TuftedPyrRS.hoc") }
{n_CellGroup_1 = 1}

{n_CellGroup_1_local = 0 } // actual number created on this host

objectvar a_CellGroup_1[n_CellGroup_1]

proc addCell_CellGroup_1() {
    strdef reference
    sprint(reference, "CellGroup_1_%d", $1)
    a_CellGroup_1[$1] = new L5TuftedPyrRS(reference, "L5TuftedPyrRS", "Cell: tuftRS_0 exported from NEURON ModelView")
    allCells.append(a_CellGroup_1[$1])
}

for i = 0, n_CellGroup_1-1 {
    addCell_CellGroup_1(i)
    n_CellGroup_1_local = n_CellGroup_1_local +1 

}

{a_CellGroup_1[0].position(88.86232,11.026585,48.060738)}

strdef simConfig
{simConfig = "Default Simulation Configuration"}
{celsius = 6.3}



proc initialiseValues0() {

    for i = 0, n_CellGroup_1-1 {
        forsec a_CellGroup_1[i].all  v = -70.0

    }

}

objref fih0
{fih0 = new FInitializeHandler(0, "initialiseValues0()")}


proc initialiseValues1() {

    for i = 0, n_CellGroup_1-1 {
        forsec a_CellGroup_1[i].all { ek = -95.0}
        forsec a_CellGroup_1[i].all { ena = 50.0}
    }

}

objref fih1
{fih1 = new FInitializeHandler(1, "initialiseValues1()")}



{ n_stim_Input_0 = 1 }
objectvar stim_Input_0[n_stim_Input_0]

a_CellGroup_1[0].comp_1 {
    stim_Input_0[0] = new CurrentClampExt(0.25)
    stim_Input_0[0].del = 0.0
    stim_Input_0[0].dur = 500.0
    stim_Input_0[0].amp = 0.2
    stim_Input_0[0].repeat = 0
}


access L5TuftedPyrRS[0].comp_1

tstop = 500.0
dt = 0.025
steps_per_ms = 40.0
objref fih_0
fih_0 = new FInitializeHandler(0.0, "callfi0()")
proc callfi0() {

// Just left in for testing purposes. [Ca2+] is initialised to rest_conc of cell mechanism cad (=0) anyway...

init_cai = 00

forall if (ismembrane("ca_ion")) {
    if (init_cai > 0) {
        print "Changing initial cai in: ", secname(), " to ", init_cai," before INITIAL calls, so correct val of cai is used there..."
        cai = init_cai
    }
}

}
objref fih_1
fih_1 = new FInitializeHandler(1.0, "callfi1()")
proc callfi1() {


// Just left in for testing purposes. [Ca2+] is initialised to rest_conc of cell mechanism cad (=0) anyway...

forall if (ismembrane("ca_ion")) {
	//print "Changing eca in: ", secname()
	///eca = 125
	if (init_cai > 0) {
	    //print "Changing cai in: ", secname()
	    cai = init_cai  // defined earlier
	}
    }

}

objref v_time
objref f_time
objref propsFile

v_time = new Vector()
{ v_time.record(&t) }
{ v_time.resize(20001) }
f_time = new File()

objref v_CellGroup_1_seg_Seg0_comp_1_v[1]
for i=0, 0 {
    { v_CellGroup_1_seg_Seg0_comp_1_v[i] = new Vector() }
    { v_CellGroup_1_seg_Seg0_comp_1_v[i].record(&a_CellGroup_1[i].comp_1.v(0.25))} 
    { v_CellGroup_1_seg_Seg0_comp_1_v[i].resize(20001) }
}
objref f_CellGroup_1_seg_Seg0_comp_1_v[1]

strdef simReference
simReference = "PySim_6"



strdef simsDir
simsDir = "/home/kloskowski/Desktop/Python-skript/Pyr_RS/simulations/"

strdef targetDir
{ sprint(targetDir, "%s%s/", simsDir, simReference)}

strdef date
// Note: not showing date/time of start/stop of simulation. This requires Cygwin to be installed// which includes the "date" unix command. Install under c:\cygwin

setuptime = stopsw()

print "Setup time for simulation: ",setuptime," seconds"

print "Starting simulation of duration ",tstop,"ms, dt: ",dt,"ms, reference: ",simReference,""

{currenttime = startsw()}
{run()}

{realruntime = startsw() - currenttime}
print "Finished simulation in ", realruntime ,"seconds"

print "Storing the data..."

strdef timeFilename
for i=0, 0 {
    f_CellGroup_1_seg_Seg0_comp_1_v[i] = new File()
    strdef filename
    {sprint(filename, "%sCellGroup_1_%d.dat", targetDir, i)}
    f_CellGroup_1_seg_Seg0_comp_1_v[i].wopen(filename)
    v_CellGroup_1_seg_Seg0_comp_1_v[i].printf(f_CellGroup_1_seg_Seg0_comp_1_v[i])
    f_CellGroup_1_seg_Seg0_comp_1_v[i].close()
}


{ sprint(timeFilename, "%s%s", targetDir, "time.dat")}
{ f_time.wopen(timeFilename) }
{ v_time.printf(f_time) }
{ f_time.close() }

{savetime = stopsw()}

propsFile = new File()
strdef propsFilename
{sprint(propsFilename, "%ssimulator.props", targetDir)}
{propsFile.wopen(propsFilename)}
{propsFile.printf("#This is a list of properties generated by NEURON during the simulation run\n")}
{propsFile.printf("Host=%s\n", host)}
{propsFile.printf("RealSimulationTime=%g\n", realruntime)}
{propsFile.printf("SimulationSaveTime=%g\n", savetime)}
{propsFile.printf("SimulationSetupTime=%g\n", setuptime)}
{propsFile.printf("NEURONversion=%s\n", nrnversion())}
{propsFile.close()}

print "Data stored in ",savetime, "secs in directory: ", targetDir

//forall print secname(), ": ", cai



// Note this block is only included in the generated NEURON code for Sim Config: Default Simulation Configuration

print ""
print ""
print ""
print "**************************"
print "  NOTE: when comparing ChannelML mechanisms to the original mod file"
print "  implementations, be sure to *unselect* the Force correct ChannelML"
print "  initialisation checkbox in neuroConstruct, as many of the original mod "
print "  files do not correctly set the values for m, n, etc. at t=0 (may be due to"
print "  mod files mimicing original Fortran). This option should be selected"
print "  when comparing the ChannelML implementations on NEURON and"
print "  GENESIS"
print "**************************"
print ""



print "Version info: ", nrnversion()

objref strFuncs
strFuncs = new StringFunctions()

if(strFuncs.substr(nrnversion(), "VERSION 7") >=0 || strFuncs.substr(nrnversion(), "Release 7") >=0) {
    print "*******************"
    print "***  NOTE: These cell models have only been tested so far on NEURON version 6.2!"
    print "*******************"
}


quit()
