# IMPORTANT:
#  This is the default configuration and should be left as is.
#  Instead one can create a new configuration file and add only
#  the parameters that will differ from the default value.
#  The custom configuration will override any settings in the
#  default configuration.
#
#  - Comments begin with '#'.
#  - The values of some sections are interpreted in a special way
#    by python (using eval([value])), so don't parse config files
#    which you do not trust.


[Global]
#  The folder to which finished simualations will be copied.
result_directory=./results

result_affix=result

#  Values: [0, 1]
debugMode=0

#  The number of simulations to run in parallel.
#  Set to "auto" if unsure.
#  Values: [auto, 1, 2, ...]
maxSimThreads=auto

#  Values: [0, 1]
showExtraInfo=0

candidateIndex=data/index.txt
projectConfig=data/config.txt
densityFile=data/density.txt
channelFile=data/channel.txt
locationFile=data/location.txt
resultDensityFile=data/ergebnisDens.txt


[Logging]
#  logServerLevel sets the filtering level of the logginServer only.
#  Example values: 1 for Anything,        10 for logging.DEBUG, 20 for logging.INFO
#                 30 for logging.WARNING, 40 for logging.ERROR, 50 for logging.CRITICAL
file_log_level=20
console_log_level=20

#  With port 0 a free port is automatically chosen by the os.
log_server_port=0

log_server_file=output.log

[NeuroConstruct]
installPath=neuroConstruct_1.6.0
neuroConstructSeed=1234
simulatorSeed=4321


#  These options determine the algorithms and their behaviour and
#  must likely be adjusted
[Simulation]

#  The type of neuron to generate.
#  For another project, please one of:  RS, FS, IB, CH
mode=RS

#  The algorithm to use for solving the maximization problem.
#  Values: {genetic|annealing}
algorithm=genetic

sim_config=Default Simulation Configuration

#  Number of seconds after which the simulation will be aborted,
#  if no progress could be made. A value of 0 or lower deactivates
#  simulation timeout.
sim_timeout=300

stimulation=Input_0

cell=L5TuftedPyrRS


#  The options duration, dt and currents are used by the
#  fitness.evaluate_param callable.
duration=500
dt=0.05
currents=3, 0.2, 0.3


#  Following are the callables that will be used for the genetic
#  algorithm. They define the behaviour and must each be defined
#  and configured in their identically named section below.

#  The selector chooses a list of candidates for generating the
#  offspring
selector=tournament_selection

#  Variators are used to generate the offspring from the selected
#  candidates. This is a comma separated list.
variators=n_point_crossover, nuMutation

#  A replacer chooses the chromosomes of the parents and their offspring
#  to replace the current generation (choosing the next generation).
replacer=truncation_replacement

#  Terminators test for an ending critera. This is a comma separated
#  list
terminators=generation_termination

#  The evaluation function to calculate the fitness of each new
#  chromosome.
evaluator=fitness.evaluate_param

#  The generator function to generate a new chromosome when called.
generator=chromgen.generate_chromosome


#  Any entries in this section (custom ones also) will be evaluated
#  and passed to inspyre and any callables (evaluator, replacer, ...).
#
#  IMPORTANT NOTE: The parameters in the following section are all
#    evaluated by using "eval" in python, so use quotes for strings,
#    and so on
[EvolveParameters]

#  Size of the population in each generation.
pop_size=50

#  The number of generations to run.
#  Required by the nuMutation and generation_termination.
max_generations=30

[Gui]

#  Comma separated list of sections in this config, each specifying the replacer
#  and its arguments. (See callable definitions below)
known_replacers=truncation_replacement

#  Comma separated list of sections in this config, each specifying the variator
#  and its arguments. (See callable definitions below)
known_variators=n_point_crossover, nuMutation

#  Comma separated list of sections in this config, each specifying the selector
#  and its arguments. (See callable definitions below)
known_selectors=tournament_selection

#  Comma separated list of sections in this config, each specifying the terminator
#  and its arguments. (See callable definitions below)
known_terminators=generation_termination

#  Comma separated list of sections in this config, each specifying the evaluator
#  and its arguments. (See callable definitions below)
known_terminators=fitness.evaluate_param

#  Comma separated list of sections in this config, each specifying the generator
#  and its arguments. (See callable definitions below)
known_generators=chromgen.generate_conductance

################################################################################
#  
#  Callable definitions for inspyred (variators, selectors, replacers,
#  terminators, evaluators and generators)
#
#  Most of these are built in functions, but using a self provieded method as
#  the value for the "class" key is possible.
#
#  IMPORTANT NOTE: The parameters in the following sections are all
#    evaluated by using "eval" in python and pose a security risk if misused.
#
#  See the inspyred documentation for more details.
################################################################################

[n_point_crossover]
class=inspyred.ec.variators.n_point_crossover
crossover_rate=1.0
num_crossover_points=1


[tournament_selection]
class=inspyred.ec.selectors.tournament_selection
#  The number of individuals to be selected
num_selected=50
#  The tournament size
tournament_size=15


[truncation_replacement]
class=inspyred.ec.replacers.truncation_replacement


#  Custom mutator
#  Requires: "max_generations" (See "EvolveParameters").
[nuMutation]
class=inspyred.ec.variators.mutator(nuMutation)
mutation_strength=0.15


#  Requires: "max_generations" (See "EvolveParameters").
[generation_termination]
class=inspyred.ec.terminators.generation_termination

#  Custom evaluator
[fitness.evaluate_param]
class=fitness.evaluate_param
thrFourier=5
#  an FS anpassen (groesser)
penFourier=-10000
penalty_ai_RS=-3500
penalty_ai_FS=-3500
penalty_ibf_IB=-2500
penalty_ibf_CH=-3500
penalty_ir_IB=-3500
penalty_ir_CH=-2500
W_apw=1
W_ibf=1
W_ir=1
W_ai=1
W_slope=1

#  Custom generator
[chromgen.generate_chromosome]
class=inspyred.ec.generators.diversify(chromgen.generate_chromosome)

# Parameters for simulated annealing
[annealing]
stepmax=100
start_temperature=10000
# Values: {linear|exponential}
cooling_schedule=exponential
# required for exponential cooling schedule, has to be between 0 and 1
cooling_schedule_alpha=0.9
